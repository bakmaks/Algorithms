def LIS(A):
    """
    Дан список натуральных чисел A = [7,2,1,3,8,4,9,1,2,6,5,9,3,8,1]
    найти длину наибольшей возрастающей последовательности для каждого A[i]
    Вывести  в виде:
    7 2 1 3 8 4 9 1 2 6 5 9 3 8 1  -- список натуральных чисел
    1 1 1 2 3 3 4 1 2 4 4 5 3 5 1  -- список длин НВП для каждого A[i]
    :param A: Список
    """
    print(*A)
    n = len(A)
    d = [1] * n     # Массив для запоминания длин каждого A[i]
    # В каждом элементе d[i] запоминается длина НВП для A[i]
    for i in range(n):
        for j in range(i):
            if A[j] < A[i] and d[j] + 1 > d[i]:
                d[i] = d[j] + 1
    for i in range(n):
        print(d[i], end=' ')
    print()

def LIS1(A: list, n: int):
    """
    Дано целое число 1 ≤ n ≤ 10^3 и массив A[1…n] натуральных чисел, не превосходящих 2⋅10^9.
    Выведите максимальное 1 ≤ k ≤ n, для которого найдётся подпоследовательность 1 ≤ i1 < i2 < … < ik ≤ n
    длины k, в которой каждый элемент делится на предыдущий (формально: для  всех 1 ≤ j < k,
    A[i_j]|A[i_{j+1}]).

    Пример:
    вход: [3 6 7 12]
    ответ: 3

    :param A: Список
    :param n: Длина списка
    """
    print(*A)
    ans = 0
    d = [0] * n
    for i in range(n):
        d[i] = 1
        for j in range(i):
            if A[i] % A[j] == 0 and d[j] + 1 > d[i]:
                d[i] = d[j] + 1
    for i in range(n):
        # print(d[i], end=' ')
        ans = max(ans, d[i])
    print(ans)

if __name__ == '__main__':
    LIS([7, 2, 1, 3, 8, 4, 9, 1, 2, 6, 5, 9, 3, 8, 1])
    print()
    n = 4
    x = [3,6,7,12]
    LIS1(x, n)      # 3
