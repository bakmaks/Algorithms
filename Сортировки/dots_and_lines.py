import sys
import bisect

"""
В первой строке задано два целых числа 1 <= n 50000 и 1 <= m 50000 — количество отрезков и 
точек на прямой, соответственно. Следующие n строк содержат по два целых числа a_i и b_i,
(a_i <= b_i) — координаты концов отрезков. Последняя строка содержит m целых чисел — координаты точек. 
Все координаты не превышают 10^8  по модулю. Точка считается принадлежащей отрезку, 
если она находится внутри него или на границе. Для каждой точки в порядке появления во 
вводе выведите, скольким отрезкам она принадлежит.
Ввод тестового файла:
python dots_and_lines.py < data.txt
В файле answer.txt находится ответ.
"""

reader = (map(int, line.split(' ')) for line in sys.stdin)
# Ввод кол-ва отрезков и точек
n, m = next(reader)
lines_begin = []    # Начальные точки отрезков
lines_end = []      # Конечные точки отрезков
for i in range(n):
    # Ввод координат отрезков.
    begin, end = next(reader)
    lines_begin.append(begin), lines_end.append(end)
# Ввод точек.
dots = list(next(reader))
"""
Для решения данной задачи надо подсчитать кол-во начал отрезков которые <= чем координата точки, на этих
отрезках точка возможно находится, затем надо подсчитать кол-во концов отрезков 
которые строго < чем координата точки, на этих отрезках точка точно не лежит.
Потом найти разность между первым и вторым аргументом. Получаем кол-во отрезков на которые точка попадает.
"""
# Сортировка ,ч тчо бы применить двоичный поиск
lines_begin.sort()
lines_end.sort()
for dot in dots:
    # Находим кол-во начал отрезков
    begins = bisect.bisect(lines_begin, dot)
    # Находим кол-во концов отрезков
    ends = bisect.bisect_left(lines_end, dot)
    # Вывод искомой разности.
    print( begins-ends, end=' ')